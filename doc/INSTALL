

This file introduces PinaVM about the required software and how to build.

________________________________________________________________________
    Requirements
________________________________________________________________________


 -- GCC (http://gcc.gnu.org/)
   _____________________________________________________________________
    GCC is a open-source compiler, You need gcc to compile PinaVM.
    Make sure your gcc version isn't listed here:
    http://llvm.org/docs/GettingStarted.html#brokengcc



 -- CMake (http://www.cmake.org/)
   _____________________________________________________________________
    CMake is a cross-platform open-source build system.
    PinaVM requires CMake version 2.8.8 or newer.



 -- LLVM (http://llvm.org/)
   _____________________________________________________________________
    LLVM is a collection of compiler libraries. The source code of
    PinaVM relies on LLVM.
    
    Use of the LLVM version mentioned in the LLVM_RECOMMAND_VERSION
    variable of scripts/PinaVMConfig.cmake is mandatory.
    
    The easiest way to install LLVM is via package manager. You can
    try to find the package named "llvm-x.y" and install it. where x.y
    denotes the LLVM version. If there is no LLVM package in your
    distribution release. Downloading source code from llvm.org and
    build it is another solution. If you are lazy doing them, PinaVM
    can automatically download, build and install LLVM for you.

    Autoinstall script of PinaVM is executed while configuration. With
    -DAUTOINSTALL=TRUE, PinaVM will install both LLVM and Clang for you
    if finds no LLVM in your system.




 -- Clang (http://clang.llvm.org/) 
   _____________________________________________________________________
    Clang is a C/C++ compiler based on LLVM.
    PinaVM needs a compiler which can generate LLVM assembly, so
    that PinaVM can JIT the generated assembly to collect information
    of SystemC.

    The Clang version is suggested to be the same with LLVM, then
    Clang can generate the bitcode which PinaVM can parse.
   


________________________________________________________________________
    Replacement of Clang
________________________________________________________________________

 -- DragonEgg (http://dragonegg.llvm.org/)
   _____________________________________________________________________
    DragonEgg is a gcc plugin which generate LLVM assembly from AST of
    gcc. DragonEgg is a replacement of Clang. Compilation of DragonEgg
    is harder than Clang, so there is no autoinstall script to help.
   
    The DragonEgg version is suggested to be the same with LLVM, then
    DragonEgg can generate the bitcode which PinaVM can parse.



________________________________________________________________________
    Build PinaVM
________________________________________________________________________

Building PinaVM is easy if you have experience using cmake, just follow
those commands.

  cd /where/you/want/to/build
  cmake /where/your/pinavm/source <Options>
  make


________________________________________________________________________
    Options for CMake
________________________________________________________________________

-DLLVM_ROOT=/where/llvm/should/be
  This option denotes your LLVM installation or the position you want
  to install LLVM via autoinstall.

-DAUTOINSTALL=TRUE
  This option denotes whether cmake automatically install LLVM for
  you, by default it is false. You can also set -DLLVM_ROOT=/where/llvm
  to specify the path where LLVM will be installed to. LLVM is installed
  to ./lib/llvm-3.2 if LLVM_ROOT is blank.

-DDRAGONEGG_GCC=g++-4.x
  Dragonegg is a gcc plugin, so cmake script must know you gcc version
  corresponding to your dragonegg. By setting this option, cmake script
  will find the g++ and dragonegg. If nothing found, Clang will
  substitute dragonegg and g++.  

-DCMAKE_BUILD_TYPE=None,Debug,Release
  Users can choose build type by assigning this parameter.  By default
  it is None. Debug level is set to -g3 if Debug is chosen.

-DGEN_HEADER_DEPENDENCY=TRUE
  Set this to TRUE to let CMake generate header dependencies of your
  SystemC applications. This option may be useful if you frequently
  modify source code of SystemC libraries or program. Turn on this
  option may take about 10 seconds in CMake stage.

-DTEST_CMAKE=TRUE
  CAUTION : You should not use it unless you know what cmake script
  actually doing. Only used when users testing cmake scripts. With this
  option, CMake downloads LLVM from local space instead of llvm.org
  and shows LLVM configurations.
