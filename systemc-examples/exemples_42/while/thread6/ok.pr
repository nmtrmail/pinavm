

/*---- Types ----*/
/* Structure forward decls */

/*---- Global variables ----*/


/*---- Encoding ----*/
#define NBTHREADS 1
#define NBEVENTS 2
bool finished[NBTHREADS];

int T[NBTHREADS];

int e[NBTHREADS];

inline wait(pnumber, time)
{
    T[pnumber] = T[pnumber] + time;         
    ( finished[0] || e[0] != 0 || T[pnumber] <= T[0] );
}

inline notify_toto_0xbf923938 (pnumber)
{
    if
    :: e[0] == 1  ->
       e[0] = 0;
       T[0]=T[pnumber];
    :: else -> skip;
    fi;
}

inline notify_toto_0xbf923978 (pnumber)
{
    if
    :: e[0] == 2  ->
       e[0] = 0;
       T[0]=T[pnumber];
    :: else -> skip;
    fi;
}

inline wait_toto_0xbf923938_0()
{
    e[0] = 1;
    e[0] == 0;
}

inline wait_toto_0xbf923978_0()
{
    e[0] = 2;
    e[0] == 0;
}



/*---- Threads ----*/

proctype _ZN6thread2T1Ev_pnumber_0()
{
atomic {
int llvm_cbe_alloca_20_point;
    int llvm_cbe_tmp__1;
    int llvm_cbe_a_2e_0;
    int llvm_cbe_a_2e_0__PHI_TEMPORARY;
    
    skip;
    /*OutputLValue*/ llvm_cbe_alloca_20_point = AAAAAAAAAAAAAAAAA
0;
    wait_toto_0xbf923938_0();
;
    llvm_cbe_a_2e_0__PHI_TEMPORARY = AAAAAAAAAAAAAAAAA
0    /* for PHI node */;    
    goto AAAAAAAAAAAAAAAAA
llvm_cbe_bb1;

llvm_cbe_bb1:
    skip;
    /*OutputLValue*/ llvm_cbe_a_2e_0 = AAAAAAAAAAAAAAAAA
llvm_cbe_a_2e_0__PHI_TEMPORARY;
    wait_toto_0xbf923978_0();
;
    if
        :: AAAAAAAAAAAAAAAAA
(LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
AAAAAAAAAAAAAAAAA
llvm_cbe_a_2e_0 <= AAAAAAAAAAAAAAAAA
3) ->       goto AAAAAAAAAAAAAAAAA
llvm_cbe_bb;
        :: true ->       goto AAAAAAAAAAAAAAAAA
llvm_cbe_return;
    fi;


llvm_cbe_bb:
    skip;
    /*OutputLValue*/ llvm_cbe_tmp__1 = AAAAAAAAAAAAAAAAA
llvm_cbe_a_2e_0 + AAAAAAAAAAAAAAAAA
1;
    llvm_cbe_a_2e_0__PHI_TEMPORARY = AAAAAAAAAAAAAAAAA
llvm_cbe_tmp__1    /* for PHI node */;    
    goto AAAAAAAAAAAAAAAAA
llvm_cbe_bb1;

llvm_cbe_return:
    skip;
finished[0] = true;
}
}

/* ----------------------------- Init --------------------------------- */
init
{
    int i = 0;
    do
      :: i == NBTHREADS -> break;
      :: else ->
         e[i] = 0;
         T[i] = 0;
         finished[i] = false;
         i++;
    od;


    atomic {
        run _ZN6thread2T1Ev_pnumber_0();
    }
}
